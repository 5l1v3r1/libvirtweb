This Java applet is based on the TightVNC applet, which in turn is based on
the original VNC Java applet. This version of the applet is heavily stripped
and customized.

	Copyright (C) 1999 AT&T Laboratories Cambridge.
	Copyright (C) 2000 Tridia Corp.
	Copyright (C) 2002-2003 RealVNC Ltd.
	Copyright (C) 2001-2004 HorizonLive.com, Inc.
	Copyright (C) 2000-2007 Constantin Kaplinsky
	Copyright (C) 2000-2009 TightVNC Group
	All rights reserved.

This software is distributed under the GNU General Public Licence as
published by the Free Software Foundation. See the file LICENCE.TXT for the
conditions under which this software is made available. TightVNC also
contains code from other sources. See the Acknowledgements section below, and
the individual files for details of the conditions under which they are made
available.


Compiling from the sources
==========================

To compile all the .java files to .class files, simply do:

	% make all

This will also generate a JAR (Java archive) file containing all the classes. 
Most JVM (Java Virtual Machine) implementations are able to use either a set
of .class files, or the JAR archive.


Installation
============

Unlike the original VNC viewers, this viewer works in applet mode only.


Parameters
==========

The viewer supports a number of parameters allowing you to customize its
behavior. Most parameters directly correspond to the settings found in the
Options window. Both parameter names and their values are case-insensitive.

Here is the complete list of parameters supported in the viewer:

--> "COOKIE"

    Value: hexascii cookie used for AES authentication
    Default: none.

    This is a hexascii cookie used during authentication. The cookie should
    be 16 bytes in size, and thus 32 characters of hexascii.

--> "Encoding"

    Values: "Auto", "Raw", "RRE", "CoRRE", "Hextile", "ZRLE", "Zlib", "Tight".
    Default: "Auto".

    The preferred encoding. If the value is "Auto", then the viewer will
    continuously estimate average network throughput and request encodings
    that are appropriate for current connection speed. "Hextile" is an
    encoding that was designed for fast networks, while "Tight" is better
    suited for low-bandwidth connections. From the other side, "Tight"
    decoder in the TightVNC Java viewer seems to be more efficient than
    "Hextile" decoder so it may be ok for fast networks too. "ZRLE" encoding
    is similar to "Tight", but it does not support JPEG compression and
    compression levels. Unlike "Tight" encoding, "ZRLE" is supported in
    recent versions of RealVNC products. Other encodings are not efficient
    and provided for compatibility reasons.

--> "Compression level"

    Values: "Default", "1", "2", "3", "4", "5", "6", "7", "8", "9".
    Default: "Default". ;-)

    Use specified compression level for "Tight" and "Zlib" encodings. Level 1
    uses minimum of CPU time on the server but achieves weak compression
    ratios. Level 9 offers best compression but may be slow in terms of CPU
    time consumption on the server side. Use high levels with very slow
    network connections, and low levels when working over higher-speed
    networks. The "Default" value means that the server's default compression
    level should be used.

--> "JPEG image quality"

    Values: "JPEG off", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9".
    Default: "6".

    Use the specified image quality level in "Tight" encoding. Quality level
    0 denotes bad image quality but very impressive compression ratios, while
    level 9 offers very good image quality at lower compression ratios. If
    the value is "JPEG off", the server will not use lossy JPEG compression
    in "Tight" encoding.

--> "Cursor shape updates"

    Values: "Enable", "Ignore", "Disable".
    Default: "Enable".

    Cursor shape updates is a protocol extension used to handle remote cursor
    movements locally on the client side, saving bandwidth and eliminating
    delays in mouse pointer movement. Note that current implementation of
    cursor shape updates does not allow a client to track mouse cursor
    position at the server side. This means that clients would not see mouse
    cursor movements if mouse was moved either locally on the server, or by
    another remote VNC client. Set this parameter to "Disable" if you always
    want to see real cursor position on the remote side. Setting this option
    to "Ignore" is similar to "Enable" but the remote cursor will not be
    visible at all. This can be a reasonable setting if you don't care about
    cursor shape and don't want to see two mouse cursors, one above another.

--> "Use CopyRect"

    Values: "Yes", "No".
    Default: "Yes".

    The "CopyRect" encoding saves bandwidth and drawing time when parts of
    the remote screen are moving around. Most likely, you don't want to
    change this setting.

--> "Restricted colors"

    Values: "Yes", "No".
    Default: "No".

    If set to "No", then 24-bit color format is used to represent pixel data. 
    If set to "Yes", then only 8 bits are used to represent each pixel. 8-bit
    color format can save bandwidth, but colors may look very inaccurate.

--> "Mouse buttons 2 and 3"

    Values: "Normal", "Reversed".
    Default: "Normal".

    If set to "Reversed", then right mouse button (button 2) will act as it
    was middle mouse button (button 3), and vice versa.

--> "View only"

    Values: "Yes", "No".
    Default: "No".

    If set to "Yes", then all keyboard and mouse events in the desktop window
    will be silently ignored and will not be passed to the remote side.

--> "Scale remote cursor"

    Values: "No", "50%", "75%", "125%", "150%".
    Default: "No".

    If a percentage value is specified, the remote cursor is reduced
    or enlarged accordingly. Scaling takes place only when "View only"
    is set to "No", and "Cursor shape updates" is set to "Enable".

--> "Share desktop"

    Values: "Yes", "No".
    Default: "Yes".

    Share the connection with other clients on the same VNC server. The exact
    behaviour in each case depends on the server configuration.

--> "Open new window" (no GUI equivalent, applicable only in the applet mode)

    Values: "Yes", "No".
    Default: "No".

    Operate in a separate window. This makes possible resizing the desktop,
    and adds scroll bars when necessary. If the server supports variable
    desktop size, the window will resize automatically when remote desktop
    size changes.

--> "Scaling factor" (no GUI equivalent)

    Value: an integer in the range of [1..1000], or the string "auto".
    Default: "100".

    Scale local representation of the remote desktop. The value is
    interpreted as scaling factor in percents. The default value of 100%
    corresponds to the original framebuffer size. Values below 100 reduce
    image size, values above 100 enlarge the image proportionally. If the
    parameter is set to "auto", automatic scaling is performed. Auto-scaling
    tries to choose scaling factor such way that the whole remote framebuffer
    will fit on the local screen. Currently, auto-scaling is supported only
    when the remote desktop is shown in a separate frame (always true in the
    application mode, and also in the applet mode with "Open new window"
    parameter set to "yes").

--> "Show controls" (no GUI equivalent)

    Values: "Yes", "No".
    Default: "Yes".

    Set to "No" if you want to get rid of that button panel at the top.

--> "Offer relogin" (no GUI equivalent, not applicable in the applet mode)

    Values: "Yes", "No".
    Default: "Yes".

    If set to "No", the buttons "Login again" and "Close window" won't be
    shown on disconnects or after an error has occured.

--> "Show offline desktop" (no GUI equivalent)

    Values: "Yes", "No".
    Default: "No".

    If set to "Yes", the viewer would continue to display desktop even
    if the remote side has closed the connection. In this case, if the
    button panel is enabled, then the "Disconnect" button would be
    changed to "Hide desktop" after the connection is lost.

--> "Defer screen updates" (no GUI equivalent)

    Value: time in milliseconds.
    Default: "20".

    When updating the desktop contents after receiving an update from server,
    schedule repaint within the specified number of milliseconds. Small delay
    helps to coalesce several small updates into one drawing operation,
    improving CPU usage. Set this parameter to 0 to disable deferred updates.

--> "Defer cursor updates" (no GUI equivalent)

    Value: time in milliseconds.
    Default: "10".

    When updating the desktop after moving the mouse, schedule repaint within
    the specified number of milliseconds. This setting makes sense only when
    "Cursor shape updates" parameter is set to "Enable". Small delay helps to
    coalesce several small updates into one drawing operation, improving CPU
    usage. Set this parameter to 0 to disable deferred cursor updates.

--> "Defer update requests" (no GUI equivalent)

    Value: time in milliseconds.
    Default: "0".

    After processing an update received from server, wait for the specified
    number of milliseconds before requesting next screen update. Such delay
    will end immediately on every mouse or keyboard event if not in the "view
    only" mode. Small delay helps the server to coalesce several small
    updates into one framebuffer update, improving both bandwidth and CPU
    usage. Increasing the parameter value does not affect responsiveness on
    mouse and keyboard events, but causes delays in updating the screen when
    there is no mouse and keyboard activity on the client side.

--> "DEBUG_XU" (no GUI equivalent)

    Value: non-negative integer.
    Default: 0.

    Debugging option that causes update statistics reset after the specified
    number of first framebuffer updates. This option was added to measure the
    performance of a VNC server. First few updates (especially the very first
    one) may be notably slower than others, and the viewer can exclude such
    updates from statistics.

--> "DEBUG_CU" (no GUI equivalent)

    Value: non-negative integer.
    Default: 0.

    Debugging option that causes the viewer disconnect after the specified
    number of framebuffer updates. When used with the "DEBUG_XU" parameter,
    the number of updates specified in "DEBUG_XU" is not counted as part of
    this parameter's value. E.g. if "DEBUG_XU"=2 and "DEBUG_CU"=10, then the
    viewer will disconnect after 12 framebuffer updates: update statistics
    will be reset after first two updates, then collected for next 10
    updates, then the viewer will disconnect automatically. If the value is
    0, the viewer will not disconnect automatically. This option was added to
    measure the performance of a VNC server.

